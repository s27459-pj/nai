from abc import ABC, abstractmethod
from typing import Literal, Self

from easyAI.Player import Player

type PlayerIndex = Literal[1, 2]

class TwoPlayerGame[Move](ABC):
    players: list[Player]
    current_player: PlayerIndex

    @classmethod
    @abstractmethod
    def possible_moves(cls) -> list[Move]: ...
    @abstractmethod
    def make_move(self, move: Move) -> None: ...
    @abstractmethod
    def is_over(self) -> bool: ...
    def play(
        self, nmoves: int = ..., verbose: bool = ...
    ) -> list[Self | tuple[Self, Move]]: ...
    @property
    def opponent_index(self) -> PlayerIndex: ...
    @property
    def player(self) -> Player: ...
    @property
    def opponent(self) -> Player: ...
    def switch_player(self) -> None: ...
    def copy(self) -> Self: ...
    def get_move(self) -> Move: ...
    def play_move(self, move: Move) -> None: ...
